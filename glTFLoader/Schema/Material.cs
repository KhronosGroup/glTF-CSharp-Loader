//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace glTFLoader.Schema {
    using System.Linq;
    using System.Runtime.Serialization;
    
    
    public class Material : GltfChildOfRootProperty {
        
        /// <summary>
        /// Backing field for PbrMetallicRoughness.
        /// </summary>
        private MaterialPbrMetallicRoughness m_pbrMetallicRoughness;
        
        /// <summary>
        /// Backing field for NormalTexture.
        /// </summary>
        private MaterialNormalTextureInfo m_normalTexture;
        
        /// <summary>
        /// Backing field for OcclusionTexture.
        /// </summary>
        private MaterialOcclusionTextureInfo m_occlusionTexture;
        
        /// <summary>
        /// Backing field for EmissiveTexture.
        /// </summary>
        private TextureInfo m_emissiveTexture;
        
        /// <summary>
        /// Backing field for EmissiveFactor.
        /// </summary>
        private float[] m_emissiveFactor = new float[] {
                0F,
                0F,
                0F};
        
        /// <summary>
        /// Backing field for AlphaMode.
        /// </summary>
        private AlphaModeEnum m_alphaMode = AlphaModeEnum.OPAQUE;
        
        /// <summary>
        /// Backing field for AlphaCutoff.
        /// </summary>
        private float m_alphaCutoff = 0.5F;
        
        /// <summary>
        /// Backing field for DoubleSided.
        /// </summary>
        private bool m_doubleSided = false;
        
        /// <summary>
        /// A set of parameter values that are used to define the metallic-roughness material model from Physically Based Rendering (PBR) methodology. When undefined, all the default values of `pbrMetallicRoughness` **MUST** apply.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("pbrMetallicRoughness")]
        public MaterialPbrMetallicRoughness PbrMetallicRoughness {
            get {
                return this.m_pbrMetallicRoughness;
            }
            set {
                this.m_pbrMetallicRoughness = value;
            }
        }
        
        /// <summary>
        /// The tangent space normal texture.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("normalTexture")]
        public MaterialNormalTextureInfo NormalTexture {
            get {
                return this.m_normalTexture;
            }
            set {
                this.m_normalTexture = value;
            }
        }
        
        /// <summary>
        /// The occlusion texture.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("occlusionTexture")]
        public MaterialOcclusionTextureInfo OcclusionTexture {
            get {
                return this.m_occlusionTexture;
            }
            set {
                this.m_occlusionTexture = value;
            }
        }
        
        /// <summary>
        /// The emissive texture.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("emissiveTexture")]
        public TextureInfo EmissiveTexture {
            get {
                return this.m_emissiveTexture;
            }
            set {
                this.m_emissiveTexture = value;
            }
        }
        
        /// <summary>
        /// The factors for the emissive color of the material.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("emissiveFactor")]
        public float[] EmissiveFactor {
            get {
                return this.m_emissiveFactor;
            }
            set {
                if ((value.Length < 3u)) {
                    throw new System.ArgumentException("Array not long enough");
                }
                if ((value.Length > 3u)) {
                    throw new System.ArgumentException("Array too long");
                }
                int index = 0;
                for (index = 0; (index < value.Length); index = (index + 1)) {
                    if ((value[index] < 0D)) {
                        throw new System.ArgumentOutOfRangeException();
                    }
                }
                for (index = 0; (index < value.Length); index = (index + 1)) {
                    if ((value[index] > 1D)) {
                        throw new System.ArgumentOutOfRangeException();
                    }
                }
                this.m_emissiveFactor = value;
            }
        }
        
        /// <summary>
        /// The alpha rendering mode of the material.
        /// </summary>
        [System.Text.Json.Serialization.JsonConverter(typeof(JsonStringEnumConverterWithEnumMemberAttrSupport<AlphaModeEnum>))]
        [System.Text.Json.Serialization.JsonPropertyName("alphaMode")]
        public AlphaModeEnum AlphaMode {
            get {
                return this.m_alphaMode;
            }
            set {
                this.m_alphaMode = value;
            }
        }
        
        /// <summary>
        /// The alpha cutoff value of the material.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("alphaCutoff")]
        public float AlphaCutoff {
            get {
                return this.m_alphaCutoff;
            }
            set {
                if ((value < 0D)) {
                    throw new System.ArgumentOutOfRangeException("AlphaCutoff", value, "Expected value to be greater than or equal to 0");
                }
                this.m_alphaCutoff = value;
            }
        }
        
        /// <summary>
        /// Specifies whether the material is double sided.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("doubleSided")]
        public bool DoubleSided {
            get {
                return this.m_doubleSided;
            }
            set {
                this.m_doubleSided = value;
            }
        }
        
        public bool ShouldSerializePbrMetallicRoughness() {
            return ((m_pbrMetallicRoughness == null) 
                        == false);
        }
        
        public bool ShouldSerializeNormalTexture() {
            return ((m_normalTexture == null) 
                        == false);
        }
        
        public bool ShouldSerializeOcclusionTexture() {
            return ((m_occlusionTexture == null) 
                        == false);
        }
        
        public bool ShouldSerializeEmissiveTexture() {
            return ((m_emissiveTexture == null) 
                        == false);
        }
        
        public bool ShouldSerializeEmissiveFactor() {
            return (m_emissiveFactor.SequenceEqual(new float[] {
                        0F,
                        0F,
                        0F}) == false);
        }
        
        public bool ShouldSerializeAlphaMode() {
            return ((m_alphaMode == AlphaModeEnum.OPAQUE) 
                        == false);
        }
        
        public bool ShouldSerializeAlphaCutoff() {
            return ((m_alphaCutoff == 0.5F) 
                        == false);
        }
        
        public bool ShouldSerializeDoubleSided() {
            return ((m_doubleSided == false) 
                        == false);
        }
        
        public enum AlphaModeEnum {
            
            OPAQUE,
            
            MASK,
            
            BLEND,
        }
    }
}
